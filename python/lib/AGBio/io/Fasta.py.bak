#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import re


class SequenceList(list):
    '''Class representing a set of sequences
    '''
    def __init__(self, sequences=''):
        self.extend(sequences)

    def symetric_difference(self, other):
        '''Find elements in either the list or other but not both.
        '''
        tmplist = self + other        
        seqlist = SequenceList()
        for i in range(len(tmplist) - 1):
            tseq = tmplist[i]
            if tseq not in tmplist[:i] + tmplist[i+1:]:
                seqlist.append(tmplist[i])
        return seqlist
    

class Sequence(object):
    '''Class representing a sequence
    '''
    def __init__(self, header, sequence):
        self.__header = header
        self.__sequence = sequence

    def __str__(self):
        return str([self.header, self.sequence])

    @property
    def header(self):
        return self.__header

    @property
    def sequence(self):
        return self.__sequence

    def __eq__(self, other):
        ss = ''.join(self.sequence.split('\n'))
        os = ''.join(other.sequence.split('\n'))
        if ss == os:
            return True
        return False

    def replacePattern(self, pattern, replacement):
        tmp = ''
        for c in self.sequence:
            if c == pattern:
                tmp += replacement
            else:
                tmp += c
        return Sequence(self.header, tmp)


def loadSequences( infile ):
    '''
    '''
    sequences = SequenceList()
    inseq = False
    tmp = []
    for line in infile:
        if line.startswith( '>' ):
            if inseq:
                sequences.append( Sequence( tmp[0], ''.join( tmp[1:] ).lstrip() ) )
                tmp = []
                inseq = False
            inseq = True
        if inseq:
            tmp.append( line )
    sequences.append( Sequence( tmp[0], ''.join( tmp[1:] ).lstrip() ) )
    return sequences

def saveSequences( sequences, outfile ):
    '''Writes the sequences in fasta format in the specified output file.
    '''
    for sequence in sequences:
            outfile.write( sequence.header )
            outfile.write( sequence.sequence )

def searchPattern( sequences, pattern, mode='count' ):
    '''
    '''
    PATTERN = re.compile( pattern )
    count = 0
    matching = SequenceList()
    for sequence in sequences:
        if re.search( PATTERN, sequence.sequence ):
            matching.append( sequence )
            count += 1
    if mode == 'full':
        return matching
    elif mode == 'header':
        return [sequence.header for sequence in matching]
    else:
        return count

def replacePattern( sequence, pattern, replacement ):
    '''
    '''
    tmp = ''
    for c in sequence.sequence:
        if c == pattern:
            tmp += replacement
        else:
            tmp += c
    return Sequence(sequence.header, tmp)
